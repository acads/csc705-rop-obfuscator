0x0000000000401bef : adc byte ptr [rbp - 8], al ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000405000 : adc dword ptr [rax + 1], ecx ; ret 0x8948
0x0000000000404e5b : adc eax, 0xe8000000 ; insb byte ptr [rdi], dx ; ret
0x0000000000403729 : adc eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 0x10 ; pop rbp ; ret
0x000000000040767b : add ah, ah ; add eax, dword ptr [rax] ; add al, ah ; ret
0x000000000040765b : add ah, al ; add eax, dword ptr [rax] ; add al, dl ; ret
0x0000000000407b5b : add ah, al ; or byte ptr [rax], al ; add al, dl ; sar edi, cl ; call qword ptr [rax]
0x000000000040769d : add al, 0 ; add al, dh ; ret
0x000000000040767f : add al, ah ; ret
0x0000000000406fdb : add al, bh ; mov ah, -1 ; call qword ptr [rax]
0x0000000000404e5e : add al, ch ; insb byte ptr [rdi], dx ; ret
0x000000000040769f : add al, dh ; ret
0x000000000040765f : add al, dl ; ret
0x0000000000407b5f : add al, dl ; sar edi, cl ; call qword ptr [rax]
0x00000000004061df : add bl, dh ; ret
0x0000000000404dfa : add byte ptr [rax - 0x75], cl ; loopne 0x404e51 ; mov edi, dword ptr [rbp - 8] ; call rax
0x0000000000404708 : add byte ptr [rax - 0x75], cl ; ror byte ptr [r8 - 0x77], 1 ; int 0x80
0x0000000000407679 : add byte ptr [rax], al ; add ah, ah ; add eax, dword ptr [rax] ; add al, ah ; ret
0x0000000000407659 : add byte ptr [rax], al ; add ah, al ; add eax, dword ptr [rax] ; add al, dl ; ret
0x0000000000404e5c : add byte ptr [rax], al ; add al, ch ; insb byte ptr [rdi], dx ; ret
0x00000000004061dd : add byte ptr [rax], al ; add bl, dh ; ret
0x00000000004061db : add byte ptr [rax], al ; add byte ptr [rax], al ; add bl, dh ; ret
0x00000000004006b0 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret 0
0x00000000004006b2 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret 0
0x00000000004061dc : add byte ptr [rax], al ; add byte ptr [rax], al ; ret
0x00000000004006b4 : add byte ptr [rax], al ; add byte ptr [rax], al ; ret 0
0x0000000000406ba4 : add byte ptr [rax], al ; add byte ptr [rax], al ; ret 0x4043
0x0000000000403ffe : add byte ptr [rax], al ; add byte ptr [rdi], cl ; xchg eax, esp ; ret 0xd284
0x00000000004036ea : add byte ptr [rax], al ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000403490 : add byte ptr [rax], al ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000401183 : add byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000004073ba : add byte ptr [rax], al ; and al, 1 ; add byte ptr [rax], al ; nop ; test al, -1 ; call qword ptr [rsi]
0x0000000000404f68 : add byte ptr [rax], al ; call 0x4011d4
0x0000000000406fda : add byte ptr [rax], al ; clc ; mov ah, -1 ; call qword ptr [rax]
0x00000000004012f9 : add byte ptr [rax], al ; jmp 0x401199
0x0000000000404e58 : add byte ptr [rax], al ; jmp 0x404e7d
0x00000000004022d2 : add byte ptr [rax], al ; mov rax, qword ptr [rbp - 0x10] ; mov eax, dword ptr [rax] ; pop rbp ; ret
0x00000000004073be : add byte ptr [rax], al ; nop ; test al, -1 ; call qword ptr [rsi]
0x00000000004020e8 : add byte ptr [rax], al ; pop rbp ; ret
0x00000000004045cb : add byte ptr [rax], al ; pop rbx ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000403458 : add byte ptr [rax], al ; pop rbx ; pop rbp ; ret
0x00000000004061de : add byte ptr [rax], al ; ret
0x00000000004006b6 : add byte ptr [rax], al ; ret 0
0x0000000000406ba6 : add byte ptr [rax], al ; ret 0x4043
0x00000000004070db : add byte ptr [rax], bh ; fdivr st(7) ; call qword ptr [rax]
0x000000000040718b : add byte ptr [rax], bh ; in eax, -1 ; call rax
0x000000000040714b : add byte ptr [rax], bl ; fdivp st(7) ; call rax
0x0000000000406fcb : add byte ptr [rax], cl ; mov ah, -1 ; call rax
0x0000000000407c9f : add byte ptr [rax], dl ; fdivp st(7) ; jmp rax
0x00000000004045cc : add byte ptr [rbx + 0x41], bl ; pop rsi ; pop r15 ; pop rbp ; ret
0x0000000000403459 : add byte ptr [rbx + 0x5d], bl ; ret
0x0000000000401a5e : add byte ptr [rbx - 0x8b4b], cl ; dec dword ptr [rax - 0x77] ; ret 0xb0
0x00000000004073bb : add byte ptr [rcx + rax], ah ; add byte ptr [rax], al ; nop ; test al, -1 ; call qword ptr [rsi]
0x00000000004015a8 : add byte ptr [rcx], al ; ret
0x0000000000404000 : add byte ptr [rdi], cl ; xchg eax, esp ; ret 0xd284
0x0000000000404e59 : add cl, ch ; adc eax, 0xe8000000 ; insb byte ptr [rdi], dx ; ret
0x00000000004036e8 : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x10 ; pop rbp ; ret
0x00000000004045ca : add dword ptr [rax], eax ; add byte ptr [rbx + 0x41], bl ; pop rsi ; pop r15 ; pop rbp ; ret
0x0000000000403457 : add dword ptr [rax], eax ; add byte ptr [rbx + 0x5d], bl ; ret
0x0000000000404ea4 : add dword ptr [rdi], ecx ; mov dh, -0x3f ; add rsp, 0x40 ; pop rbp ; ret
0x0000000000401b72 : add dword ptr [rdi], ecx ; mov dh, -0x40 ; pop rbp ; ret
0x00000000004015a4 : add eax, 0x207cd6 ; add ebx, esi ; ret
0x000000000040767d : add eax, dword ptr [rax] ; add al, ah ; ret
0x000000000040765d : add eax, dword ptr [rax] ; add al, dl ; ret
0x000000000040156b : add eax, edx ; sar rax, 1 ; jne 0x40157c ; pop rbp ; ret
0x00000000004015a9 : add ebx, esi ; ret
0x00000000004016bb : add esp, 0x10 ; pop rbp ; ret
0x000000000040595c : add esp, 0x130 ; pop rbp ; ret
0x0000000000403454 : add esp, 0x138 ; pop rbx ; pop rbp ; ret
0x00000000004048bc : add esp, 0x1a0 ; pop rbp ; ret
0x00000000004020e4 : add esp, 0x1c0 ; pop rbp ; ret
0x0000000000401eb0 : add esp, 0x20 ; pop rbp ; ret
0x000000000040179d : add esp, 0x30 ; pop rbp ; ret
0x0000000000404ea9 : add esp, 0x40 ; pop rbp ; ret
0x0000000000403acc : add esp, 0x50 ; pop rbp ; ret
0x0000000000402563 : add esp, 0x70 ; pop rbp ; ret
0x000000000040360e : add esp, 0x78 ; pop rbx ; pop rbp ; ret
0x00000000004039dd : add esp, 0x90 ; pop rbp ; ret
0x0000000000404754 : add esp, 0xa0 ; pop rbp ; ret
0x0000000000401186 : add esp, 8 ; ret
0x000000000040156a : add rax, rdx ; sar rax, 1 ; jne 0x40157d ; pop rbp ; ret
0x00000000004016ba : add rsp, 0x10 ; pop rbp ; ret
0x000000000040595b : add rsp, 0x130 ; pop rbp ; ret
0x0000000000403453 : add rsp, 0x138 ; pop rbx ; pop rbp ; ret
0x00000000004048bb : add rsp, 0x1a0 ; pop rbp ; ret
0x00000000004020e3 : add rsp, 0x1c0 ; pop rbp ; ret
0x0000000000401eaf : add rsp, 0x20 ; pop rbp ; ret
0x000000000040179c : add rsp, 0x30 ; pop rbp ; ret
0x0000000000404ea8 : add rsp, 0x40 ; pop rbp ; ret
0x0000000000403acb : add rsp, 0x50 ; pop rbp ; ret
0x0000000000402562 : add rsp, 0x70 ; pop rbp ; ret
0x000000000040360d : add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x00000000004039dc : add rsp, 0x90 ; pop rbp ; ret
0x0000000000404753 : add rsp, 0xa0 ; pop rbp ; ret
0x0000000000401185 : add rsp, 8 ; ret
0x0000000000405a9c : addps xmm1, xmm2 ; movaps xmm0, xmm1 ; pop rbp ; ret
0x0000000000405a9b : addsd xmm1, xmm2 ; movaps xmm0, xmm1 ; pop rbp ; ret
0x00000000004073bc : and al, 1 ; add byte ptr [rax], al ; nop ; test al, -1 ; call qword ptr [rsi]
0x0000000000401b71 : and al, 1 ; movzx eax, al ; pop rbp ; ret
0x00000000004015a7 : and byte ptr [rax], al ; add ebx, esi ; ret
0x0000000000403a17 : and eax, 0x48fffffd ; add esp, 0x20 ; pop rbp ; ret
0x0000000000401c3f : and eax, 0x609288 ; pop rbp ; ret
0x0000000000401c5f : and eax, 0x609290 ; pop rbp ; ret
0x0000000000401c83 : and eax, 0x609298 ; pop rbp ; ret
0x000000000040502e : call 0x2fd1e
0x0000000000404f6a : call 0x4011d2
0x000000000040502f : call 0x4012e2
0x0000000000405128 : call 0x401382
0x0000000000403489 : call 0xffffffffe902bdd9
0x0000000000403488 : call 0xffffffffe902bdda
0x00000000004061b9 : call qword ptr [r12 + rbx*8]
0x0000000000406f5f : call qword ptr [rax]
0x00000000004073c3 : call qword ptr [rsi]
0x00000000004061ba : call qword ptr [rsp + rbx*8]
0x00000000004015cd : call rax
0x00000000004075e3 : call rdx
0x000000000040595a : clc ; add rsp, 0x130 ; pop rbp ; ret
0x0000000000404abf : clc ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000401bf1 : clc ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000405336 : clc ; add rsp, 0x50 ; pop rbp ; ret
0x0000000000404e02 : clc ; call rax
0x000000000040156f : clc ; jne 0x401578 ; pop rbp ; ret
0x0000000000406fdc : clc ; mov ah, -1 ; call qword ptr [rax]
0x0000000000402415 : clc ; mov dword ptr [rax + 4], ecx ; mov eax, dword ptr [rbp - 0x10] ; pop rbp ; ret
0x000000000040610b : clc ; mov eax, dword ptr [rbp - 8] ; pop rbp ; ret
0x000000000040599b : clc ; pop rbp ; ret
0x0000000000405be6 : cld ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000404dc9 : cld ; add rsp, 0x20 ; pop rbp ; ret
0x00000000004050f0 : cld ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000405039 : cld ; add rsp, 0x40 ; pop rbp ; ret
0x0000000000406108 : cld ; mov dword ptr [rbp - 8], eax ; mov eax, dword ptr [rbp - 8] ; pop rbp ; ret
0x0000000000405be3 : cld ; mov eax, dword ptr [rbp - 4] ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000405b86 : cld ; mov eax, dword ptr [rbp - 4] ; add rsp, 0x20 ; pop rbp ; ret
0x00000000004050ed : cld ; mov eax, dword ptr [rbp - 4] ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000405036 : cld ; mov eax, dword ptr [rbp - 4] ; add rsp, 0x40 ; pop rbp ; ret
0x0000000000403456 : cmp byte ptr [rcx], al ; add byte ptr [rax], al ; pop rbx ; pop rbp ; ret
0x000000000040152d : cmp eax, 0xe ; mov rbp, rsp ; ja 0x401540 ; pop rbp ; ret
0x0000000000401181 : cmp eax, dword ptr [rdx] ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x000000000040410c : cwde ; mov rcx, qword ptr [rax*8 + 0x406b68] ; jmp rcx
0x0000000000401a64 : dec dword ptr [rax - 0x77] ; ret 0xb0
0x00000000004058bf : dec dword ptr [rax - 0x7f] ; ret 1
0x000000000040353b : enter -0x74b4, 0x55 ; ror byte ptr [rcx - 0x7f], 1 ; ret 8
0x000000000040502a : enter -0x74b8, 0x75 ; call 0x2fd22
0x0000000000405029 : enter -0x74b8, 0x75 ; call 0x2fd23
0x0000000000405a5f : enter 0x4d89, -0x14 ; mov eax, dword ptr [rbp - 0x14] ; pop rbp ; ret
0x000000000040711d : fdiv st(7), st(0) ; call qword ptr [rax]
0x000000000040714d : fdivp st(7) ; call rax
0x0000000000407ca1 : fdivp st(7) ; jmp rax
0x00000000004070dd : fdivr st(7) ; call qword ptr [rax]
0x0000000000402e73 : fmul dword ptr [rax + 1] ; ret 0x8b48
0x00000000004061bc : fmul qword ptr [rax - 0x7d] ; ret
0x00000000004016b9 : hlt ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000401540 : hlt ; pop rbp ; mov edi, 0x609238 ; jmp rax
0x0000000000405a62 : in al, dx ; mov eax, dword ptr [rbp - 0x14] ; pop rbp ; ret
0x0000000000405a65 : in al, dx ; pop rbp ; ret
0x000000000040718d : in eax, -1 ; call rax
0x0000000000404e60 : insb byte ptr [rdi], dx ; ret
0x0000000000404710 : int 0x80
0x0000000000401533 : ja 0x40153a ; pop rbp ; ret
0x000000000040153f : je 0x40153d ; pop rbp ; mov edi, 0x609238 ; jmp rax
0x0000000000404f64 : jg 0x404f89 ; call 0x4011d8
0x0000000000404e01 : jge 0x404dfd ; call rax
0x0000000000405126 : jge 0x40511c ; call 0x401384
0x00000000004015a6 : jl 0x4015cd ; add byte ptr [rcx], al ; ret
0x00000000004012fb : jmp 0x401197
0x0000000000404e5a : jmp 0x404e7b
0x0000000000407783 : jmp qword ptr [rax]
0x0000000000407663 : jmp qword ptr [rdx]
0x0000000000401547 : jmp rax
0x000000000040261e : jmp rcx
0x0000000000401587 : jmp rdx
0x0000000000401570 : jne 0x401577 ; pop rbp ; ret
0x000000000040502d : jne 0x40501b ; call 0x4012e4
0x0000000000402565 : jo 0x4025c6 ; ret
0x0000000000403c74 : jo 0x403cd5 ; ret
0x0000000000403dae : jo 0x403e0f ; ret
0x0000000000403610 : js 0x403670 ; pop rbp ; ret
0x00000000004070d8 : lock or dword ptr [rax], eax ; add byte ptr [rax], bh ; fdivr st(7) ; call qword ptr [rax]
0x0000000000405030 : lodsb al, byte ptr [rsi] ; ret 0xffff
0x0000000000404dfe : loopne 0x404e4d ; mov edi, dword ptr [rbp - 8] ; call rax
0x0000000000404dfd : loopne 0x404e4e ; mov edi, dword ptr [rbp - 8] ; call rax
0x0000000000406fdd : mov ah, -1 ; call qword ptr [rax]
0x0000000000406fcd : mov ah, -1 ; call rax
0x0000000000403b4b : mov al, 0x48 ; add esp, 0x50 ; pop rbp ; ret
0x00000000004039db : mov al, 0x48 ; add esp, 0x90 ; pop rbp ; ret
0x0000000000401b6e : mov al, byte ptr [rbp - 1] ; and al, 1 ; movzx eax, al ; pop rbp ; ret
0x0000000000405d36 : mov al, byte ptr [rbp - 5] ; and al, 1 ; movzx eax, al ; pop rbp ; ret
0x0000000000401c81 : mov byte ptr [0x609298], al ; pop rbp ; ret
0x0000000000405121 : mov byte ptr [rbp - 0x11], cl ; mov rdi, qword ptr [rbp - 0x10] ; call 0x401389
0x00000000004015a3 : mov byte ptr [rip + 0x207cd6], 1 ; ret
0x0000000000405a5e : mov dh, -0x38 ; mov dword ptr [rbp - 0x14], ecx ; mov eax, dword ptr [rbp - 0x14] ; pop rbp ; ret
0x0000000000404ea6 : mov dh, -0x3f ; add rsp, 0x40 ; pop rbp ; ret
0x0000000000401b74 : mov dh, -0x40 ; pop rbp ; ret
0x0000000000401c5d : mov dword ptr [0x609290], edi ; pop rbp ; ret
0x0000000000402416 : mov dword ptr [rax + 4], ecx ; mov eax, dword ptr [rbp - 0x10] ; pop rbp ; ret
0x0000000000402324 : mov dword ptr [rax], ecx ; pop rbp ; ret
0x00000000004023d8 : mov dword ptr [rax], edi ; mov eax, dword ptr [rbp - 0x28] ; pop rbp ; ret
0x0000000000405a60 : mov dword ptr [rbp - 0x14], ecx ; mov eax, dword ptr [rbp - 0x14] ; pop rbp ; ret
0x00000000004059fa : mov dword ptr [rbp - 0x24], eax ; mov eax, dword ptr [rbp - 0x24] ; pop rbp ; ret
0x0000000000401799 : mov dword ptr [rbp - 0x2c], eax ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000405028 : mov dword ptr [rbp - 0x38], eax ; mov rsi, qword ptr [rbp - 0x18] ; call 0x4012e9
0x00000000004016b7 : mov dword ptr [rbp - 0xc], eax ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000406109 : mov dword ptr [rbp - 8], eax ; mov eax, dword ptr [rbp - 8] ; pop rbp ; ret
0x000000000040248e : mov dword ptr [rcx + 0x30], eax ; add rsp, 0x20 ; pop rbp ; ret
0x000000000040360c : mov eax, 0x78c48348 ; pop rbx ; pop rbp ; ret
0x0000000000401c3d : mov eax, dword ptr [0x609288] ; pop rbp ; ret
0x00000000004022d8 : mov eax, dword ptr [rax] ; pop rbp ; ret
0x00000000004049db : mov eax, dword ptr [rbp - 0x10] ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000401eac : mov eax, dword ptr [rbp - 0x10] ; add rsp, 0x20 ; pop rbp ; ret
0x00000000004022d5 : mov eax, dword ptr [rbp - 0x10] ; mov eax, dword ptr [rax] ; pop rbp ; ret
0x0000000000405995 : mov eax, dword ptr [rbp - 0x10] ; mov rdx, qword ptr [rbp - 8] ; pop rbp ; ret
0x0000000000401e2f : mov eax, dword ptr [rbp - 0x10] ; pop rbp ; ret
0x0000000000405a63 : mov eax, dword ptr [rbp - 0x14] ; pop rbp ; ret
0x0000000000404c73 : mov eax, dword ptr [rbp - 0x18] ; add rsp, 0x20 ; pop rbp ; ret
0x000000000040228d : mov eax, dword ptr [rbp - 0x18] ; add rsp, 0x30 ; pop rbp ; ret
0x000000000040231e : mov eax, dword ptr [rbp - 0x18] ; mov ecx, dword ptr [rbp - 0x10] ; mov dword ptr [rax], ecx ; pop rbp ; ret
0x0000000000404dfc : mov eax, dword ptr [rbp - 0x20] ; mov rdi, qword ptr [rbp - 8] ; call rax
0x00000000004059fd : mov eax, dword ptr [rbp - 0x24] ; pop rbp ; ret
0x00000000004023da : mov eax, dword ptr [rbp - 0x28] ; pop rbp ; ret
0x000000000040255f : mov eax, dword ptr [rbp - 0x40] ; add rsp, 0x70 ; pop rbp ; ret
0x000000000040360a : mov eax, dword ptr [rbp - 0x48] ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000403b49 : mov eax, dword ptr [rbp - 0x50] ; add rsp, 0x50 ; pop rbp ; ret
0x0000000000405be4 : mov eax, dword ptr [rbp - 4] ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000404dc7 : mov eax, dword ptr [rbp - 4] ; add rsp, 0x20 ; pop rbp ; ret
0x00000000004050ee : mov eax, dword ptr [rbp - 4] ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000405037 : mov eax, dword ptr [rbp - 4] ; add rsp, 0x40 ; pop rbp ; ret
0x0000000000404abd : mov eax, dword ptr [rbp - 8] ; add rsp, 0x20 ; pop rbp ; ret
0x000000000040400f : mov eax, dword ptr [rbp - 8] ; add rsp, 0x30 ; pop rbp ; ret
0x000000000040610c : mov eax, dword ptr [rbp - 8] ; pop rbp ; ret
0x00000000004015cb : mov ebp, esp ; call rax
0x0000000000401531 : mov ebp, esp ; ja 0x40153c ; pop rbp ; ret
0x0000000000402617 : mov ecx, dword ptr [rax*8 + 0x406660] ; jmp rcx
0x00000000004028f7 : mov ecx, dword ptr [rax*8 + 0x4066a8] ; jmp rcx
0x000000000040410e : mov ecx, dword ptr [rax*8 + 0x406b68] ; jmp rcx
0x0000000000402321 : mov ecx, dword ptr [rbp - 0x10] ; mov dword ptr [rax], ecx ; pop rbp ; ret
0x00000000004015c5 : mov edi, 0x608e20 ; mov rbp, rsp ; call rax
0x0000000000401542 : mov edi, 0x609238 ; jmp rax
0x0000000000401582 : mov edi, 0x609238 ; jmp rdx
0x0000000000405125 : mov edi, dword ptr [rbp - 0x10] ; call 0x401385
0x0000000000404e00 : mov edi, dword ptr [rbp - 8] ; call rax
0x00000000004061b7 : mov edi, edi ; call qword ptr [r12 + rbx*8]
0x00000000004061b6 : mov edi, r15d ; call qword ptr [r12 + rbx*8]
0x0000000000405334 : mov edx, dword ptr [rbp - 8] ; add rsp, 0x50 ; pop rbp ; ret
0x0000000000405999 : mov edx, dword ptr [rbp - 8] ; pop rbp ; ret
0x000000000040502c : mov esi, dword ptr [rbp - 0x18] ; call 0x4012e5
0x0000000000401580 : mov esi, eax ; mov edi, 0x609238 ; jmp rdx
0x00000000004015c7 : mov fs, word ptr [rax] ; mov rbp, rsp ; call rax
0x0000000000401c5c : mov qword ptr [0x609290], rdi ; pop rbp ; ret
0x000000000040248d : mov qword ptr [rcx + 0x30], rax ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000403b4a : mov r8b, 0x48 ; add esp, 0x50 ; pop rbp ; ret
0x000000000040360b : mov r8d, 0x78c48348 ; pop rbx ; pop rbp ; ret
0x0000000000401c3c : mov rax, qword ptr [0x609288] ; pop rbp ; ret
0x00000000004049da : mov rax, qword ptr [rbp - 0x10] ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000401eab : mov rax, qword ptr [rbp - 0x10] ; add rsp, 0x20 ; pop rbp ; ret
0x00000000004022d4 : mov rax, qword ptr [rbp - 0x10] ; mov eax, dword ptr [rax] ; pop rbp ; ret
0x0000000000405994 : mov rax, qword ptr [rbp - 0x10] ; mov rdx, qword ptr [rbp - 8] ; pop rbp ; ret
0x0000000000401e2e : mov rax, qword ptr [rbp - 0x10] ; pop rbp ; ret
0x0000000000404c72 : mov rax, qword ptr [rbp - 0x18] ; add rsp, 0x20 ; pop rbp ; ret
0x000000000040228c : mov rax, qword ptr [rbp - 0x18] ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000404dfb : mov rax, qword ptr [rbp - 0x20] ; mov rdi, qword ptr [rbp - 8] ; call rax
0x000000000040255e : mov rax, qword ptr [rbp - 0x40] ; add rsp, 0x70 ; pop rbp ; ret
0x0000000000403b48 : mov rax, qword ptr [rbp - 0x50] ; add rsp, 0x50 ; pop rbp ; ret
0x0000000000404abc : mov rax, qword ptr [rbp - 8] ; add rsp, 0x20 ; pop rbp ; ret
0x000000000040400e : mov rax, qword ptr [rbp - 8] ; add rsp, 0x30 ; pop rbp ; ret
0x00000000004015ca : mov rbp, rsp ; call rax
0x0000000000401530 : mov rbp, rsp ; ja 0x40153d ; pop rbp ; ret
0x0000000000402616 : mov rcx, qword ptr [rax*8 + 0x406660] ; jmp rcx
0x00000000004028f6 : mov rcx, qword ptr [rax*8 + 0x4066a8] ; jmp rcx
0x000000000040410d : mov rcx, qword ptr [rax*8 + 0x406b68] ; jmp rcx
0x0000000000405124 : mov rdi, qword ptr [rbp - 0x10] ; call 0x401386
0x0000000000404dff : mov rdi, qword ptr [rbp - 8] ; call rax
0x0000000000405333 : mov rdx, qword ptr [rbp - 8] ; add rsp, 0x50 ; pop rbp ; ret
0x0000000000405998 : mov rdx, qword ptr [rbp - 8] ; pop rbp ; ret
0x000000000040502b : mov rsi, qword ptr [rbp - 0x18] ; call 0x4012e6
0x000000000040157f : mov rsi, rax ; mov edi, 0x609238 ; jmp rdx
0x0000000000405a9f : movaps xmm0, xmm1 ; pop rbp ; ret
0x0000000000401bee : movups xmm0, xmmword ptr [rbp - 8] ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000401b73 : movzx eax, al ; pop rbp ; ret
0x0000000000404ea5 : movzx eax, cl ; add rsp, 0x40 ; pop rbp ; ret
0x00000000004073c0 : nop ; test al, -1 ; call qword ptr [rsi]
0x00000000004061d8 : nop dword ptr [rax + rax] ; ret
0x0000000000407189 : or al, 0 ; add byte ptr [rax], bh ; in eax, -1 ; call rax
0x0000000000407c9d : or al, byte ptr [rax] ; add byte ptr [rax], dl ; fdivp st(7) ; jmp rax
0x0000000000402e6e : or byte ptr [r8 - 0x75], 0x55 ; fmul dword ptr [rax + 1] ; ret 0x8b48
0x0000000000402e6f : or byte ptr [rax - 0x75], 0x55 ; fmul dword ptr [rax + 1] ; ret 0x8b48
0x0000000000407b5d : or byte ptr [rax], al ; add al, dl ; sar edi, cl ; call qword ptr [rax]
0x00000000004070d9 : or dword ptr [rax], eax ; add byte ptr [rax], bh ; fdivr st(7) ; call qword ptr [rax]
0x0000000000403d31 : or eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000407149 : or eax, dword ptr [rax] ; add byte ptr [rax], bl ; fdivp st(7) ; call rax
0x0000000000405123 : out dx, eax ; mov rdi, qword ptr [rbp - 0x10] ; call 0x401387
0x0000000000405122 : out dx, eax ; mov rdi, qword ptr [rbp - 0x10] ; call 0x401388
0x00000000004061cc : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000004061ce : pop r13 ; pop r14 ; pop r15 ; ret
0x00000000004045ce : pop r14 ; pop r15 ; pop rbp ; ret
0x00000000004061d0 : pop r14 ; pop r15 ; ret
0x00000000004045d0 : pop r15 ; pop rbp ; ret
0x00000000004061d2 : pop r15 ; ret
0x00000000004015a2 : pop rbp ; mov byte ptr [rip + 0x207cd6], 1 ; ret
0x0000000000401541 : pop rbp ; mov edi, 0x609238 ; jmp rax
0x000000000040157e : pop rbp ; mov rsi, rax ; mov edi, 0x609238 ; jmp rdx
0x00000000004061cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000004061cf : pop rbp ; pop r14 ; pop r15 ; ret
0x0000000000401535 : pop rbp ; ret
0x00000000004045cd : pop rbx ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000040345a : pop rbx ; pop rbp ; ret
0x00000000004045d1 : pop rdi ; pop rbp ; ret
0x00000000004061d3 : pop rdi ; ret
0x00000000004045cf : pop rsi ; pop r15 ; pop rbp ; ret
0x00000000004061d1 : pop rsi ; pop r15 ; ret
0x00000000004061cd : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000402211 : push 0x48006092 ; add esp, 0x30 ; pop rbp ; ret
0x0000000000407147 : push qword ptr [rax + 0x1800000b] ; fdivp st(7) ; call rax
0x0000000000407187 : push qword ptr [rax + 0x3800000c] ; in eax, -1 ; call rax
0x0000000000406fc7 : push qword ptr [rax + 0x8000005] ; mov ah, -1 ; call rax
0x00000000004070d7 : push rax ; or dword ptr [rax], eax ; add byte ptr [rax], bh ; fdivr st(7) ; call qword ptr [rax]
0x0000000000403ace : push rax ; pop rbp ; ret
0x0000000000405335 : push rbp ; clc ; add rsp, 0x50 ; pop rbp ; ret
0x000000000040599a : push rbp ; clc ; pop rbp ; ret
0x0000000000402e72 : push rbp ; fmul dword ptr [rax + 1] ; ret 0x8b48
0x00000000004015c4 : push rbp ; mov edi, 0x608e20 ; mov rbp, rsp ; call rax
0x00000000004052da : push rbp ; ror byte ptr [rax + 1], 1 ; ret 0x8948
0x000000000040554d : push rbp ; ror byte ptr [rax - 0x7f], 1 ; ret 1
0x000000000040353e : push rbp ; ror byte ptr [rcx - 0x7f], 1 ; ret 8
0x0000000000405129 : push rbx ; ret 0xffff
0x0000000000401189 : ret
0x00000000004006b8 : ret 0
0x0000000000402e8b : ret 0x1fe8
0x0000000000401302 : ret 0x207d
0x0000000000406ba8 : ret 0x4043
0x00000000004040c9 : ret 0x8844
0x0000000000404b42 : ret 0x8948
0x0000000000402f9d : ret 0x89a5
0x0000000000402e76 : ret 0x8b48
0x000000000040190a : ret 0xb0
0x0000000000401565 : ret 0xc148
0x0000000000404003 : ret 0xd284
0x00000000004052af : ret 0xe280
0x000000000040348c : ret 0xee8
0x0000000000404f6c : ret 0xffff
0x00000000004037ae : ret 1
0x0000000000403542 : ret 8
0x000000000040470b : ror byte ptr [r8 - 0x77], 1 ; int 0x80
0x0000000000402560 : ror byte ptr [r8 - 0x7d], -0x3c ; jo 0x4025cb ; ret
0x00000000004052db : ror byte ptr [rax + 1], 1 ; ret 0x8948
0x000000000040156c : ror byte ptr [rax - 0x2f], 1 ; clc ; jne 0x40157b ; pop rbp ; ret
0x000000000040470c : ror byte ptr [rax - 0x77], 1 ; int 0x80
0x0000000000402561 : ror byte ptr [rax - 0x7d], -0x3c ; jo 0x4025ca ; ret
0x000000000040554e : ror byte ptr [rax - 0x7f], 1 ; ret 1
0x000000000040353f : ror byte ptr [rcx - 0x7f], 1 ; ret 8
0x0000000000404ea7 : ror dword ptr [rax - 0x7d], -0x3c ; pop rbp ; ret
0x0000000000405a9a : sal dl, 1 ; addps xmm1, xmm2 ; movaps xmm0, xmm1 ; pop rbp ; ret
0x00000000004015a5 : salc ; jl 0x4015ce ; add byte ptr [rcx], al ; ret
0x000000000040156e : sar eax, 1 ; jne 0x401579 ; pop rbp ; ret
0x0000000000407b61 : sar edi, cl ; call qword ptr [rax]
0x000000000040156d : sar rax, 1 ; jne 0x40157a ; pop rbp ; ret
0x0000000000405d38 : sti ; and al, 1 ; movzx eax, al ; pop rbp ; ret
0x0000000000405aa0 : sub cl, al ; pop rbp ; ret
0x000000000040620d : sub esp, 8 ; add rsp, 8 ; ret
0x000000000040620c : sub rsp, 8 ; add rsp, 8 ; ret
0x0000000000406f5d : test al, -1 ; call qword ptr [rax]
0x00000000004073c1 : test al, -1 ; call qword ptr [rsi]
0x00000000004061da : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret
0x00000000004052ae : xchg eax, edi ; ret 0xe280
0x0000000000404002 : xchg eax, esp ; ret 0xd284
0x000000000040595e : xor byte ptr [rcx], al ; add byte ptr [rax], al ; pop rbp ; ret
0x00000000004023d6 : xor edi, esi ; mov dword ptr [rax], edi ; mov eax, dword ptr [rbp - 0x28] ; pop rbp ; ret
