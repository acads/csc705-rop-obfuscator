0x000000000040bee4 : adc al, 0xf ; add byte ptr [rax], al ; ret 0xffff
0x0000000000404054 : adc byte ptr [rcx], al ; add byte ptr [rax], al ; pop rbp ; ret
0x000000000040bf8d : adc dword ptr [rax], eax ; add byte ptr [rdx + rdx*8 - 1], bl ; call rsp
0x000000000040c00d : adc eax, dword ptr [rax] ; add ah, ch ; fdiv st(7), st(0) ; call rsp
0x0000000000406d79 : adc eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 0x10 ; pop rbp ; ret
0x000000000040c00f : add ah, ch ; fdiv st(7), st(0) ; call rsp
0x000000000040be8f : add ah, ch ; mov bh, -1 ; call rsp
0x000000000040be4f : add ah, cl ; mov ch, -1 ; call rsp
0x000000000040c47d : add al, 0 ; add byte ptr [rax], al ; xchg bh, bh ; call rsp
0x000000000040bc4d : add al, 0 ; add byte ptr [rbp + rbx*2 - 1], cl ; call rsp
0x0000000000401c66 : add al, 0x25 ; ret
0x0000000000401c59 : add al, 0x25 ; ret 0x60e2
0x000000000040c27c : add al, 2 ; add byte ptr [rax], al ; xor byte ptr [rcx - 1], dh ; call qword ptr [rax]
0x000000000040c27d : add al, byte ptr [rax] ; add byte ptr [rax], dh ; jno 0x40c288 ; call qword ptr [rax]
0x0000000000401d97 : add al, ch ; ret
0x0000000000409abf : add bl, dh ; ret
0x000000000040bd0f : add byte ptr [rax + rcx*4 - 1], ch ; call rsp
0x0000000000405017 : add byte ptr [rax - 0x75], cl ; push rbp ; call 0x302d16f
0x0000000000407e18 : add byte ptr [rax - 0x75], cl ; ror byte ptr [r8 - 0x77], 1 ; int 0x80
0x0000000000402a5b : add byte ptr [rax - 0x77], cl ; fsubr st(1) ; ret
0x00000000004027d1 : add byte ptr [rax - 0x77], cl ; ret 0xb0
0x000000000040c85f : add byte ptr [rax], ah ; test al, -1 ; jmp qword ptr [rdx]
0x000000000040c27a : add byte ptr [rax], al ; add al, 2 ; add byte ptr [rax], al ; xor byte ptr [rcx - 1], dh ; call qword ptr [rax]
0x0000000000409abd : add byte ptr [rax], al ; add bl, dh ; ret
0x0000000000405015 : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; push rbp ; call 0x302d171
0x0000000000402a59 : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; fsubr st(1) ; ret
0x00000000004027cf : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; ret 0xb0
0x0000000000409abb : add byte ptr [rax], al ; add byte ptr [rax], al ; add bl, dh ; ret
0x0000000000409d2a : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret 0x40b0
0x0000000000402710 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000402a66 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000408ae9 : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rbp - 4] ; pop rbp ; ret
0x0000000000409abc : add byte ptr [rax], al ; add byte ptr [rax], al ; ret
0x0000000000409d2c : add byte ptr [rax], al ; add byte ptr [rax], al ; ret 0x40b0
0x0000000000404483 : add byte ptr [rax], al ; add byte ptr [rbx + 0x5d], bl ; ret
0x0000000000402d3f : add byte ptr [rax], al ; add byte ptr [rbx - 0x76b71b8b], cl ; ret 0xb0
0x0000000000402c69 : add byte ptr [rax], al ; add byte ptr [rbx - 0x76b7438b], cl ; ret 0xb0
0x0000000000405041 : add byte ptr [rax], al ; add byte ptr [rcx + 0xf], al ; xchg eax, esp ; ret 0x8445
0x000000000040764e : add byte ptr [rax], al ; add byte ptr [rdi], cl ; xchg eax, esp ; ret 0xd284
0x0000000000401c62 : add byte ptr [rax], al ; add dh, al ; add al, 0x25 ; ret
0x0000000000401c55 : add byte ptr [rax], al ; add dh, al ; add al, 0x25 ; ret 0x60e2
0x000000000040225c : add byte ptr [rax], al ; add dh, dh ; add al, 0x25 ; ret
0x0000000000402579 : add byte ptr [rax], al ; add dh, dh ; add al, 0x25 ; ret 0x60e2
0x0000000000402712 : add byte ptr [rax], al ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000406ae0 : add byte ptr [rax], al ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000402a68 : add byte ptr [rax], al ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000401323 : add byte ptr [rax], al ; add rsp, 8 ; ret
0x000000000040c45a : add byte ptr [rax], al ; in al, 3 ; add byte ptr [rax], al ; test edi, edi ; call rdi
0x000000000040c00e : add byte ptr [rax], al ; in al, dx ; fdiv st(7), st(0) ; call rsp
0x000000000040be8e : add byte ptr [rax], al ; in al, dx ; mov bh, -1 ; call rsp
0x000000000040bd0e : add byte ptr [rax], al ; insb byte ptr [rdi], dx ; mov bh, bh ; call rsp
0x0000000000401359 : add byte ptr [rax], al ; jmp 0x401339
0x0000000000408aeb : add byte ptr [rax], al ; mov eax, dword ptr [rbp - 4] ; pop rbp ; ret
0x0000000000405922 : add byte ptr [rax], al ; mov rax, qword ptr [rbp - 0x10] ; mov eax, dword ptr [rax] ; pop rbp ; ret
0x0000000000403605 : add byte ptr [rax], al ; pop rbp ; ret
0x0000000000407cdb : add byte ptr [rax], al ; pop rbx ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000404484 : add byte ptr [rax], al ; pop rbx ; pop rbp ; ret
0x000000000040bf8e : add byte ptr [rax], al ; pop rsp ; sar bh, cl ; call rsp
0x000000000040bcce : add byte ptr [rax], al ; pushfq ; jp 0x40bcd7 ; call rsp
0x0000000000409abe : add byte ptr [rax], al ; ret
0x0000000000409d2e : add byte ptr [rax], al ; ret 0x40b0
0x000000000040bee6 : add byte ptr [rax], al ; ret 0xffff
0x000000000040c45e : add byte ptr [rax], al ; test edi, edi ; call rdi
0x000000000040c47f : add byte ptr [rax], al ; xchg bh, bh ; call rsp
0x000000000040c27e : add byte ptr [rax], al ; xor byte ptr [rcx - 1], dh ; call qword ptr [rax]
0x000000000040c27f : add byte ptr [rax], dh ; jno 0x40c286 ; call qword ptr [rax]
0x000000000040bc4f : add byte ptr [rbp + rbx*2 - 1], cl ; call rsp
0x000000000040bdcf : add byte ptr [rbp + rbx*4 - 1], bl ; call rsp
0x0000000000407cdc : add byte ptr [rbx + 0x41], bl ; pop rsi ; pop r15 ; pop rbp ; ret
0x0000000000404485 : add byte ptr [rbx + 0x5d], bl ; ret
0x00000000004020c8 : add byte ptr [rbx - 0x1574b], cl ; dec dword ptr [rax - 0x77] ; ret 0xb0
0x0000000000402651 : add byte ptr [rbx - 0x16b4b], cl ; dec dword ptr [rax - 0x77] ; ret 0xb0
0x00000000004026b3 : add byte ptr [rbx - 0x16f4b], cl ; dec dword ptr [rax - 0x77] ; ret 0xb0
0x0000000000402d41 : add byte ptr [rbx - 0x76b71b8b], cl ; ret 0xb0
0x0000000000402c6b : add byte ptr [rbx - 0x76b7438b], cl ; ret 0xb0
0x0000000000409d27 : add byte ptr [rbx], dh ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret 0x40b0
0x0000000000405043 : add byte ptr [rcx + 0xf], al ; xchg eax, esp ; ret 0x8445
0x000000000040bd8f : add byte ptr [rcx + rbx*4 - 1], bl ; call rsp
0x00000000004017b8 : add byte ptr [rcx], al ; ret
0x0000000000407650 : add byte ptr [rdi], cl ; xchg eax, esp ; ret 0xd284
0x000000000040c27b : add byte ptr [rdx + rax], al ; add byte ptr [rax], al ; xor byte ptr [rcx - 1], dh ; call qword ptr [rax]
0x000000000040bf8f : add byte ptr [rdx + rdx*8 - 1], bl ; call rsp
0x0000000000401c61 : add byte ptr fs:[rax], al ; add dh, al ; add al, 0x25 ; ret
0x0000000000401c64 : add dh, al ; add al, 0x25 ; ret
0x0000000000401c57 : add dh, al ; add al, 0x25 ; ret 0x60e2
0x000000000040225e : add dh, dh ; add al, 0x25 ; ret
0x0000000000401fa8 : add dh, dh ; add al, 0x25 ; ret 0x60e2
0x0000000000406d38 : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000407cda : add dword ptr [rax], eax ; add byte ptr [rbx + 0x41], bl ; pop rsi ; pop r15 ; pop rbp ; ret
0x0000000000406aa7 : add dword ptr [rax], eax ; add byte ptr [rbx + 0x5d], bl ; ret
0x0000000000403bea : add dword ptr [rdi], ecx ; mov dh, -0x40 ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000402777 : add dword ptr [rdi], ecx ; mov dh, -0x40 ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000405256 : add dword ptr [rdi], ecx ; mov dh, -0x40 ; add rsp, 0x40 ; pop rbp ; ret
0x0000000000403fae : add dword ptr [rdi], ecx ; mov dh, -0x40 ; pop rbp ; ret
0x00000000004017b4 : add eax, 0x20cafe ; add ebx, esi ; ret
0x000000000040177b : add eax, edx ; sar rax, 1 ; jne 0x40178c ; pop rbp ; ret
0x00000000004017b9 : add ebx, esi ; ret
0x0000000000401c5f : add ecx, ebp ; add byte ptr fs:[rax], al ; add dh, al ; add al, 0x25 ; ret
0x000000000040196b : add esp, 0x10 ; pop rbp ; ret
0x0000000000404052 : add esp, 0x110 ; pop rbp ; ret
0x000000000040937c : add esp, 0x130 ; pop rbp ; ret
0x0000000000406aa4 : add esp, 0x138 ; pop rbx ; pop rbp ; ret
0x0000000000407fcc : add esp, 0x1a0 ; pop rbp ; ret
0x0000000000402d54 : add esp, 0x20 ; pop rbp ; ret
0x0000000000401a4d : add esp, 0x30 ; pop rbp ; ret
0x000000000040525b : add esp, 0x40 ; pop rbp ; ret
0x0000000000402ceb : add esp, 0x50 ; pop rbp ; ret
0x0000000000405123 : add esp, 0x60 ; pop rbp ; ret
0x0000000000404e0b : add esp, 0x70 ; pop rbp ; ret
0x0000000000406c5e : add esp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000403601 : add esp, 0x80 ; pop rbp ; ret
0x0000000000404480 : add esp, 0x88 ; pop rbx ; pop rbp ; ret
0x00000000004039bc : add esp, 0x90 ; pop rbp ; ret
0x0000000000407e64 : add esp, 0xa0 ; pop rbp ; ret
0x0000000000408a7f : add esp, 0xe0 ; pop rbp ; ret
0x0000000000401326 : add esp, 8 ; ret
0x000000000040177a : add rax, rdx ; sar rax, 1 ; jne 0x40178d ; pop rbp ; ret
0x000000000040196a : add rsp, 0x10 ; pop rbp ; ret
0x0000000000404051 : add rsp, 0x110 ; pop rbp ; ret
0x000000000040937b : add rsp, 0x130 ; pop rbp ; ret
0x0000000000406aa3 : add rsp, 0x138 ; pop rbx ; pop rbp ; ret
0x0000000000407fcb : add rsp, 0x1a0 ; pop rbp ; ret
0x0000000000402d53 : add rsp, 0x20 ; pop rbp ; ret
0x0000000000401a4c : add rsp, 0x30 ; pop rbp ; ret
0x000000000040525a : add rsp, 0x40 ; pop rbp ; ret
0x0000000000402cea : add rsp, 0x50 ; pop rbp ; ret
0x0000000000405122 : add rsp, 0x60 ; pop rbp ; ret
0x0000000000404e0a : add rsp, 0x70 ; pop rbp ; ret
0x0000000000406c5d : add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000403600 : add rsp, 0x80 ; pop rbp ; ret
0x000000000040447f : add rsp, 0x88 ; pop rbx ; pop rbp ; ret
0x00000000004039bb : add rsp, 0x90 ; pop rbp ; ret
0x0000000000407e63 : add rsp, 0xa0 ; pop rbp ; ret
0x0000000000408a7e : add rsp, 0xe0 ; pop rbp ; ret
0x0000000000401325 : add rsp, 8 ; ret
0x0000000000403fad : and al, 1 ; movzx eax, al ; pop rbp ; ret
0x00000000004017b7 : and byte ptr [rax], al ; add ebx, esi ; ret
0x0000000000405228 : and eax, 0x40ae2f ; call 0x4014b7
0x0000000000405567 : and eax, 0x48ffffbe ; add esp, 0x10 ; pop rbp ; ret
0x0000000000407067 : and eax, 0x48fffffd ; add esp, 0x20 ; pop rbp ; ret
0x000000000040544f : and eax, 0x6105d0 ; pop rbp ; ret
0x0000000000405473 : and eax, 0x6105d8 ; pop rbp ; ret
0x000000000040501b : call 0x302d16b
0x00000000004050d3 : call 0x401352
0x0000000000405179 : call 0x401462
0x000000000040522d : call 0x4014b2
0x0000000000401fa4 : call 0x4056f8
0x0000000000406ad9 : call 0xffffffffe902f429
0x0000000000406ad8 : call 0xffffffffe902f42a
0x00000000004041f1 : call 0xffffffffff408295
0x0000000000409a99 : call qword ptr [r12 + rbx*8]
0x000000000040c283 : call qword ptr [rax]
0x000000000040c5a3 : call qword ptr [rsi]
0x0000000000409a9a : call qword ptr [rsp + rbx*8]
0x00000000004017dd : call rax
0x000000000040c463 : call rdi
0x000000000040c7e3 : call rdx
0x000000000040bc53 : call rsp
0x000000000040937a : clc ; add rsp, 0x130 ; pop rbp ; ret
0x00000000004081cf : clc ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000402e90 : clc ; add rsp, 0x30 ; pop rbp ; ret
0x000000000040177f : clc ; jne 0x401788 ; pop rbp ; ret
0x00000000004033b6 : clc ; mov byte ptr [rbp - 1], al ; movzx eax, byte ptr [rbp - 1] ; pop rbp ; ret
0x0000000000405a65 : clc ; mov dword ptr [rax + 4], ecx ; mov eax, dword ptr [rbp - 0x10] ; pop rbp ; ret
0x00000000004099eb : clc ; mov eax, dword ptr [rbp - 8] ; pop rbp ; ret
0x0000000000402ab7 : clc ; mov rsi, qword ptr [rbp - 0x10] ; call rax
0x00000000004099ee : clc ; pop rbp ; ret
0x0000000000408ae8 : cld ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rbp - 4] ; pop rbp ; ret
0x00000000004094c6 : cld ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000405433 : cld ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000408c90 : cld ; add rsp, 0x30 ; pop rbp ; ret
0x00000000004032eb : cld ; add rsp, 0x50 ; pop rbp ; ret
0x0000000000405121 : cld ; add rsp, 0x60 ; pop rbp ; ret
0x0000000000408a7d : cld ; add rsp, 0xe0 ; pop rbp ; ret
0x00000000004099e8 : cld ; mov dword ptr [rbp - 8], eax ; mov eax, dword ptr [rbp - 8] ; pop rbp ; ret
0x00000000004094c3 : cld ; mov eax, dword ptr [rbp - 4] ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000409466 : cld ; mov eax, dword ptr [rbp - 4] ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000408c8d : cld ; mov eax, dword ptr [rbp - 4] ; add rsp, 0x30 ; pop rbp ; ret
0x00000000004032e8 : cld ; mov eax, dword ptr [rbp - 4] ; add rsp, 0x50 ; pop rbp ; ret
0x0000000000408aef : cld ; pop rbp ; ret
0x0000000000406aa6 : cmp byte ptr [rcx], al ; add byte ptr [rax], al ; pop rbx ; pop rbp ; ret
0x000000000040173d : cmp eax, 0xe ; mov rbp, rsp ; ja 0x401750 ; pop rbp ; ret
0x000000000040781c : cwde ; mov rcx, qword ptr [rax*8 + 0x40b728] ; jmp rcx
0x00000000004017b5 : dec dl ; and byte ptr [rax], al ; add ebx, esi ; ret
0x00000000004050ce : dec dword ptr [rax - 0x75] ; jge 0x405082 ; call 0x401357
0x0000000000401e2b : dec dword ptr [rax - 0x77] ; ret 0xb0
0x00000000004092df : dec dword ptr [rax - 0x7f] ; ret 1
0x0000000000406b8b : enter -0x74b4, 0x55 ; ror byte ptr [rcx - 0x7f], 1 ; ret 8
0x0000000000401d19 : enter 0x48a, 0x25 ; ret 0x60e2
0x000000000040c011 : fdiv st(7), st(0) ; call rsp
0x00000000004017d7 : fisub word ptr [rax] ; mov rbp, rsp ; call rax
0x000000000040440e : fmul dword ptr [r8 - 0x77] ; ret 0x8148
0x00000000004064c3 : fmul dword ptr [rax + 1] ; ret 0x8b48
0x000000000040440f : fmul dword ptr [rax - 0x77] ; ret 0x8148
0x0000000000409a9c : fmul qword ptr [rax - 0x7d] ; ret
0x0000000000402a5f : fsubr st(1) ; ret
0x0000000000401969 : hlt ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000401750 : hlt ; pop rbp ; mov edi, 0x60e270 ; jmp rax
0x000000000040c45c : in al, 3 ; add byte ptr [rax], al ; test edi, edi ; call rdi
0x0000000000408b4d : in al, dx ; add rsp, 0x20 ; pop rbp ; ret
0x000000000040c010 : in al, dx ; fdiv st(7), st(0) ; call rsp
0x000000000040be90 : in al, dx ; mov bh, -1 ; call rsp
0x000000000040bd10 : insb byte ptr [rdi], dx ; mov bh, bh ; call rsp
0x0000000000407e20 : int 0x80
0x0000000000401743 : ja 0x40174a ; pop rbp ; ret
0x0000000000409d28 : jae 0x409d32 ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret 0x40b0
0x000000000040174f : je 0x40174d ; pop rbp ; mov edi, 0x60e270 ; jmp rax
0x0000000000402ab6 : jge 0x402ab6 ; mov rsi, qword ptr [rbp - 0x10] ; call rax
0x00000000004050d1 : jge 0x40507f ; call 0x401354
0x000000000040135b : jmp 0x401337
0x0000000000401c60 : jmp 0x401cd1
0x0000000000402577 : jmp 0x402584
0x00000000004020de : jmp 0x402683
0x000000000040c983 : jmp qword ptr [rax]
0x000000000040c863 : jmp qword ptr [rdx]
0x0000000000401757 : jmp rax
0x0000000000402f48 : jmp rcx
0x0000000000401797 : jmp rdx
0x0000000000401780 : jne 0x401787 ; pop rbp ; ret
0x0000000000402aba : jne 0x402aae ; call rax
0x000000000040bc91 : jno 0x40bc94 ; call rsp
0x000000000040c281 : jno 0x40c284 ; call qword ptr [rax]
0x0000000000403645 : jns 0x403666 ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000404e0d : jo 0x404e6e ; ret
0x0000000000405bb5 : jo 0x405c16 ; ret
0x00000000004072c4 : jo 0x407325 ; ret
0x00000000004073fe : jo 0x40745f ; ret
0x000000000040bcd1 : jp 0x40bcd4 ; call rsp
0x0000000000406c60 : js 0x406cc0 ; pop rbp ; ret
0x0000000000405226 : lea ecx, dword ptr [0x40ae2f] ; call 0x4014b9
0x00000000004056db : loopne 0x40572b ; add esp, 0x20 ; pop rbp ; ret
0x00000000004056da : loopne 0x40572c ; add esp, 0x20 ; pop rbp ; ret
0x0000000000408a81 : loopne 0x408a88 ; add byte ptr [rax], al ; pop rbp ; ret
0x000000000040bf8c : mov ah, 0x11 ; add byte ptr [rax], al ; pop rsp ; sar bh, cl ; call rsp
0x000000000040c00c : mov ah, 0x13 ; add byte ptr [rax], al ; in al, dx ; fdiv st(7), st(0) ; call rsp
0x000000000040be8c : mov ah, 0xd ; add byte ptr [rax], al ; in al, dx ; mov bh, -1 ; call rsp
0x000000000040bccc : mov ah, 6 ; add byte ptr [rax], al ; pushfq ; jp 0x40bcd9 ; call rsp
0x000000000040bd0c : mov ah, 7 ; add byte ptr [rax], al ; insb byte ptr [rdi], dx ; mov bh, bh ; call rsp
0x000000000040719b : mov al, 0x48 ; add esp, 0x50 ; pop rbp ; ret
0x000000000040702b : mov al, 0x48 ; add esp, 0x90 ; pop rbp ; ret
0x0000000000404cdd : mov al, 0x48 ; mov ecx, dword ptr [rax*8 + 0x409c30] ; jmp rcx
0x0000000000404988 : mov al, byte ptr [rbp - 0x12] ; and al, 1 ; movzx eax, al ; pop rbp ; ret
0x0000000000404a6d : mov al, byte ptr [rbp - 1] ; and al, 1 ; movzx eax, al ; pop rbp ; ret
0x0000000000409616 : mov al, byte ptr [rbp - 5] ; and al, 1 ; movzx eax, al ; pop rbp ; ret
0x000000000040be91 : mov bh, -1 ; call rsp
0x000000000040bd11 : mov bh, bh ; call rsp
0x0000000000405471 : mov byte ptr [0x6105d8], al ; pop rbp ; ret
0x0000000000404482 : mov byte ptr [rax], al ; add byte ptr [rax], al ; pop rbx ; pop rbp ; ret
0x00000000004033b7 : mov byte ptr [rbp - 1], al ; movzx eax, byte ptr [rbp - 1] ; pop rbp ; ret
0x00000000004017b3 : mov byte ptr [rip + 0x20cafe], 1 ; ret
0x000000000040be51 : mov ch, -1 ; call rsp
0x000000000040be11 : mov cl, -1 ; call rsp
0x0000000000403bec : mov dh, -0x40 ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000402779 : mov dh, -0x40 ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000405258 : mov dh, -0x40 ; add rsp, 0x40 ; pop rbp ; ret
0x0000000000403fb0 : mov dh, -0x40 ; pop rbp ; ret
0x000000000040c5a1 : mov dr1, edi ; call qword ptr [rsi]
0x000000000040544d : mov dword ptr [0x6105d0], edi ; pop rbp ; ret
0x0000000000403321 : mov dword ptr [rax + 0x10], 0xffffffff ; pop rbp ; ret
0x0000000000405a66 : mov dword ptr [rax + 4], ecx ; mov eax, dword ptr [rbp - 0x10] ; pop rbp ; ret
0x0000000000405974 : mov dword ptr [rax], ecx ; pop rbp ; ret
0x0000000000405a28 : mov dword ptr [rax], edi ; mov eax, dword ptr [rbp - 0x28] ; pop rbp ; ret
0x00000000004056d9 : mov dword ptr [rbp - 0x20], eax ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000401a49 : mov dword ptr [rbp - 0x2c], eax ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000405176 : mov dword ptr [rbp - 0x30], eax ; call 0x401465
0x0000000000401967 : mov dword ptr [rbp - 0xc], eax ; add rsp, 0x10 ; pop rbp ; ret
0x00000000004099e9 : mov dword ptr [rbp - 8], eax ; mov eax, dword ptr [rbp - 8] ; pop rbp ; ret
0x00000000004036ae : mov dword ptr [rcx + 0x18], eax ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000403f7c : mov dword ptr [rcx + 0x18], eax ; add rsp, 0x50 ; pop rbp ; ret
0x0000000000403644 : mov dword ptr [rcx + 0x18], edi ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000405ade : mov dword ptr [rcx + 0x30], eax ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000403cac : mov dword ptr [rcx + 8], eax ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000403b4a : mov dword ptr [rdx + 0x18], ecx ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000402ce6 : mov eax, 0x48fffffd ; add esp, 0x50 ; pop rbp ; ret
0x0000000000406c5c : mov eax, 0x78c48348 ; pop rbx ; pop rbp ; ret
0x0000000000405928 : mov eax, dword ptr [rax] ; pop rbp ; ret
0x00000000004080eb : mov eax, dword ptr [rbp - 0x10] ; add rsp, 0x10 ; pop rbp ; ret
0x000000000040538f : mov eax, dword ptr [rbp - 0x10] ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000405925 : mov eax, dword ptr [rbp - 0x10] ; mov eax, dword ptr [rax] ; pop rbp ; ret
0x000000000040561f : mov eax, dword ptr [rbp - 0x10] ; pop rbp ; ret
0x0000000000408b4b : mov eax, dword ptr [rbp - 0x14] ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000402d50 : mov eax, dword ptr [rbp - 0x18] ; add rsp, 0x20 ; pop rbp ; ret
0x00000000004058dd : mov eax, dword ptr [rbp - 0x18] ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000404e07 : mov eax, dword ptr [rbp - 0x18] ; add rsp, 0x70 ; pop rbp ; ret
0x000000000040596e : mov eax, dword ptr [rbp - 0x18] ; mov ecx, dword ptr [rbp - 0x10] ; mov dword ptr [rax], ecx ; pop rbp ; ret
0x0000000000405a2a : mov eax, dword ptr [rbp - 0x28] ; pop rbp ; ret
0x0000000000405baf : mov eax, dword ptr [rbp - 0x40] ; add rsp, 0x70 ; pop rbp ; ret
0x0000000000406c5a : mov eax, dword ptr [rbp - 0x48] ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000407199 : mov eax, dword ptr [rbp - 0x50] ; add rsp, 0x50 ; pop rbp ; ret
0x00000000004094c4 : mov eax, dword ptr [rbp - 4] ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000405431 : mov eax, dword ptr [rbp - 4] ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000408c8e : mov eax, dword ptr [rbp - 4] ; add rsp, 0x30 ; pop rbp ; ret
0x00000000004032e9 : mov eax, dword ptr [rbp - 4] ; add rsp, 0x50 ; pop rbp ; ret
0x000000000040511f : mov eax, dword ptr [rbp - 4] ; add rsp, 0x60 ; pop rbp ; ret
0x0000000000408aed : mov eax, dword ptr [rbp - 4] ; pop rbp ; ret
0x00000000004081cd : mov eax, dword ptr [rbp - 8] ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000402e8e : mov eax, dword ptr [rbp - 8] ; add rsp, 0x30 ; pop rbp ; ret
0x00000000004099ec : mov eax, dword ptr [rbp - 8] ; pop rbp ; ret
0x00000000004017db : mov ebp, esp ; call rax
0x0000000000401741 : mov ebp, esp ; ja 0x40174c ; pop rbp ; ret
0x0000000000402f41 : mov ecx, dword ptr [rax*8 + 0x409b10] ; jmp rcx
0x00000000004033f3 : mov ecx, dword ptr [rax*8 + 0x409b38] ; jmp rcx
0x0000000000403ab5 : mov ecx, dword ptr [rax*8 + 0x409b98] ; jmp rcx
0x0000000000403d3f : mov ecx, dword ptr [rax*8 + 0x409bc0] ; jmp rcx
0x00000000004041ee : mov ecx, dword ptr [rax*8 + 0x409be8] ; jmp rcx
0x0000000000404cdf : mov ecx, dword ptr [rax*8 + 0x409c30] ; jmp rcx
0x0000000000405c67 : mov ecx, dword ptr [rax*8 + 0x40b220] ; jmp rcx
0x0000000000405f47 : mov ecx, dword ptr [rax*8 + 0x40b268] ; jmp rcx
0x000000000040781e : mov ecx, dword ptr [rax*8 + 0x40b728] ; jmp rcx
0x00000000004088bd : mov ecx, dword ptr [rax*8 + 0x40baa0] ; jmp rcx
0x000000000040883d : mov ecx, dword ptr [rax*8 + 0x40bb00] ; jmp rcx
0x0000000000405971 : mov ecx, dword ptr [rbp - 0x10] ; mov dword ptr [rax], ecx ; pop rbp ; ret
0x00000000004017d5 : mov edi, 0x60de20 ; mov rbp, rsp ; call rax
0x0000000000401752 : mov edi, 0x60e270 ; jmp rax
0x0000000000401792 : mov edi, 0x60e270 ; jmp rdx
0x00000000004050d0 : mov edi, dword ptr [rbp - 0x58] ; call 0x401355
0x0000000000402ab5 : mov edi, dword ptr [rbp - 8] ; mov rsi, qword ptr [rbp - 0x10] ; call rax
0x0000000000409a97 : mov edi, edi ; call qword ptr [r12 + rbx*8]
0x0000000000409a96 : mov edi, r15d ; call qword ptr [r12 + rbx*8]
0x0000000000404964 : mov esi, 0x3944ef45 ; ret 0x4d88
0x0000000000402ab9 : mov esi, dword ptr [rbp - 0x10] ; call rax
0x0000000000401790 : mov esi, eax ; mov edi, 0x60e270 ; jmp rdx
0x000000000040544c : mov qword ptr [0x6105d0], rdi ; pop rbp ; ret
0x0000000000403320 : mov qword ptr [rax + 0x10], -1 ; pop rbp ; ret
0x0000000000405175 : mov qword ptr [rbp - 0x30], rax ; call 0x401466
0x00000000004036ad : mov qword ptr [rcx + 0x18], rax ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000403f7b : mov qword ptr [rcx + 0x18], rax ; add rsp, 0x50 ; pop rbp ; ret
0x0000000000403643 : mov qword ptr [rcx + 0x18], rdi ; add rsp, 0x10 ; pop rbp ; ret
0x0000000000405add : mov qword ptr [rcx + 0x30], rax ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000403cab : mov qword ptr [rcx + 8], rax ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000403b49 : mov qword ptr [rdx + 0x18], rcx ; add rsp, 0x30 ; pop rbp ; ret
0x000000000040719a : mov r8b, 0x48 ; add esp, 0x50 ; pop rbp ; ret
0x0000000000406c5b : mov r8d, 0x78c48348 ; pop rbx ; pop rbp ; ret
0x00000000004080ea : mov rax, qword ptr [rbp - 0x10] ; add rsp, 0x10 ; pop rbp ; ret
0x000000000040538e : mov rax, qword ptr [rbp - 0x10] ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000405924 : mov rax, qword ptr [rbp - 0x10] ; mov eax, dword ptr [rax] ; pop rbp ; ret
0x000000000040561e : mov rax, qword ptr [rbp - 0x10] ; pop rbp ; ret
0x0000000000402d4f : mov rax, qword ptr [rbp - 0x18] ; add rsp, 0x20 ; pop rbp ; ret
0x00000000004058dc : mov rax, qword ptr [rbp - 0x18] ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000404e06 : mov rax, qword ptr [rbp - 0x18] ; add rsp, 0x70 ; pop rbp ; ret
0x0000000000405bae : mov rax, qword ptr [rbp - 0x40] ; add rsp, 0x70 ; pop rbp ; ret
0x0000000000407198 : mov rax, qword ptr [rbp - 0x50] ; add rsp, 0x50 ; pop rbp ; ret
0x00000000004081cc : mov rax, qword ptr [rbp - 8] ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000402e8d : mov rax, qword ptr [rbp - 8] ; add rsp, 0x30 ; pop rbp ; ret
0x00000000004017da : mov rbp, rsp ; call rax
0x0000000000401740 : mov rbp, rsp ; ja 0x40174d ; pop rbp ; ret
0x0000000000402f40 : mov rcx, qword ptr [rax*8 + 0x409b10] ; jmp rcx
0x00000000004033f2 : mov rcx, qword ptr [rax*8 + 0x409b38] ; jmp rcx
0x0000000000403ab4 : mov rcx, qword ptr [rax*8 + 0x409b98] ; jmp rcx
0x0000000000403d3e : mov rcx, qword ptr [rax*8 + 0x409bc0] ; jmp rcx
0x00000000004041ed : mov rcx, qword ptr [rax*8 + 0x409be8] ; jmp rcx
0x0000000000404cde : mov rcx, qword ptr [rax*8 + 0x409c30] ; jmp rcx
0x0000000000405c66 : mov rcx, qword ptr [rax*8 + 0x40b220] ; jmp rcx
0x0000000000405f46 : mov rcx, qword ptr [rax*8 + 0x40b268] ; jmp rcx
0x000000000040781d : mov rcx, qword ptr [rax*8 + 0x40b728] ; jmp rcx
0x00000000004088bc : mov rcx, qword ptr [rax*8 + 0x40baa0] ; jmp rcx
0x000000000040883c : mov rcx, qword ptr [rax*8 + 0x40bb00] ; jmp rcx
0x00000000004050cf : mov rdi, qword ptr [rbp - 0x58] ; call 0x401356
0x0000000000402ab4 : mov rdi, qword ptr [rbp - 8] ; mov rsi, qword ptr [rbp - 0x10] ; call rax
0x0000000000402ab8 : mov rsi, qword ptr [rbp - 0x10] ; call rax
0x000000000040178f : mov rsi, rax ; mov edi, 0x60e270 ; jmp rdx
0x0000000000403beb : movzx eax, al ; add rsp, 0x20 ; pop rbp ; ret
0x0000000000402778 : movzx eax, al ; add rsp, 0x30 ; pop rbp ; ret
0x0000000000405257 : movzx eax, al ; add rsp, 0x40 ; pop rbp ; ret
0x0000000000403faf : movzx eax, al ; pop rbp ; ret
0x00000000004033ba : movzx eax, byte ptr [rbp - 1] ; pop rbp ; ret
0x00000000004041ec : nop ; mov rcx, qword ptr [rax*8 + 0x409be8] ; jmp rcx
0x0000000000409ab8 : nop dword ptr [rax + rax] ; ret
0x000000000040be4d : or al, 0 ; add ah, cl ; mov ch, -1 ; call rsp
0x00000000004041ef : or al, 0xffffffffffffffc5 ; call 0xffffffffff408297
0x000000000040bdcd : or al, byte ptr [rax] ; add byte ptr [rbp + rbx*4 - 1], bl ; call rsp
0x00000000004064be : or byte ptr [r8 - 0x75], 0x55 ; fmul dword ptr [rax + 1] ; ret 0x8b48
0x00000000004064bf : or byte ptr [rax - 0x75], 0x55 ; fmul dword ptr [rax + 1] ; ret 0x8b48
0x000000000040bd8d : or dword ptr [rax], eax ; add byte ptr [rcx + rbx*4 - 1], bl ; call rsp
0x0000000000407381 : or eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 0x20 ; pop rbp ; ret
0x000000000040498a : out dx, al ; and al, 1 ; movzx eax, al ; pop rbp ; ret
0x0000000000409aac : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000409aae : pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000407cde : pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000409ab0 : pop r14 ; pop r15 ; ret
0x0000000000407ce0 : pop r15 ; pop rbp ; ret
0x0000000000409ab2 : pop r15 ; ret
0x00000000004017b2 : pop rbp ; mov byte ptr [rip + 0x20cafe], 1 ; ret
0x0000000000401751 : pop rbp ; mov edi, 0x60e270 ; jmp rax
0x000000000040178e : pop rbp ; mov rsi, rax ; mov edi, 0x60e270 ; jmp rdx
0x0000000000409aab : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000409aaf : pop rbp ; pop r14 ; pop r15 ; ret
0x0000000000401745 : pop rbp ; ret
0x0000000000407cdd : pop rbx ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000404486 : pop rbx ; pop rbp ; ret
0x0000000000407ce1 : pop rdi ; pop rbp ; ret
0x0000000000409ab3 : pop rdi ; ret
0x0000000000407cdf : pop rsi ; pop r15 ; pop rbp ; ret
0x0000000000409ab1 : pop rsi ; pop r15 ; ret
0x0000000000409aad : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000040bf90 : pop rsp ; sar bh, cl ; call rsp
0x0000000000402ced : push rax ; pop rbp ; ret
0x000000000040501a : push rbp ; call 0x302d16c
0x00000000004064c2 : push rbp ; fmul dword ptr [rax + 1] ; ret 0x8b48
0x00000000004017d4 : push rbp ; mov edi, 0x60de20 ; mov rbp, rsp ; call rax
0x0000000000408f6d : push rbp ; ror byte ptr [rax - 0x7f], 1 ; ret 1
0x0000000000406b8e : push rbp ; ror byte ptr [rcx - 0x7f], 1 ; ret 8
0x00000000004028b9 : push rbx ; add byte ptr [rax], al ; add dh, dh ; add al, 0x25 ; ret
0x00000000004038dc : push rcx ; sbb byte ptr [rax + 0x29], cl ; ret 0x8948
0x000000000040bcd0 : pushfq ; jp 0x40bcd5 ; call rsp
0x0000000000401329 : ret
0x0000000000401562 : ret 0x20cb
0x0000000000401362 : ret 0x20cc
0x0000000000409d30 : ret 0x40b0
0x0000000000404969 : ret 0x4d88
0x000000000040437c : ret 0x4d8b
0x00000000004026ea : ret 0x59
0x0000000000401c5b : ret 0x60e2
0x00000000004064db : ret 0x7fe8
0x0000000000404412 : ret 0x8148
0x0000000000402f29 : ret 0x8348
0x0000000000405047 : ret 0x8445
0x00000000004077d9 : ret 0x8844
0x00000000004038e0 : ret 0x8948
0x00000000004065ed : ret 0x89a5
0x000000000040474f : ret 0x8b48
0x0000000000401d95 : ret 0xb0
0x0000000000401775 : ret 0xc148
0x0000000000407653 : ret 0xd284
0x0000000000406adc : ret 0xee8
0x0000000000405053 : ret 0xf7e8
0x00000000004043da : ret 0xffff
0x0000000000404303 : ret 1
0x000000000040501e : ret 2
0x0000000000406b92 : ret 8
0x0000000000407e1b : ror byte ptr [r8 - 0x77], 1 ; int 0x80
0x0000000000405bb0 : ror byte ptr [r8 - 0x7d], -0x3c ; jo 0x405c1b ; ret
0x000000000040177c : ror byte ptr [rax - 0x2f], 1 ; clc ; jne 0x40178b ; pop rbp ; ret
0x0000000000407e1c : ror byte ptr [rax - 0x77], 1 ; int 0x80
0x0000000000405bb1 : ror byte ptr [rax - 0x7d], -0x3c ; jo 0x405c1a ; ret
0x0000000000405259 : ror byte ptr [rax - 0x7d], -0x3c ; pop rbp ; ret
0x0000000000408f6e : ror byte ptr [rax - 0x7f], 1 ; ret 1
0x0000000000406b8f : ror byte ptr [rcx - 0x7f], 1 ; ret 8
0x000000000040bf91 : sar bh, cl ; call rsp
0x000000000040177e : sar eax, 1 ; jne 0x401789 ; pop rbp ; ret
0x000000000040bee1 : sar edi, -1 ; adc al, 0xf ; add byte ptr [rax], al ; ret 0xffff
0x000000000040177d : sar rax, 1 ; jne 0x40178a ; pop rbp ; ret
0x000000000040bee0 : sar rdi, -1 ; adc al, 0xf ; add byte ptr [rax], al ; ret 0xffff
0x00000000004038dd : sbb byte ptr [rax + 0x29], cl ; ret 0x8948
0x000000000040533d : scasd eax, dword ptr [rdi] ; ret
0x0000000000403faa : sete al ; and al, 1 ; movzx eax, al ; pop rbp ; ret
0x0000000000403fac : shl byte ptr [rcx + rax], 0xf ; mov dh, -0x40 ; pop rbp ; ret
0x000000000040bee5 : sldt word ptr [rax] ; ret 0xffff
0x0000000000409618 : sti ; and al, 1 ; movzx eax, al ; pop rbp ; ret
0x0000000000409aed : sub esp, 8 ; add rsp, 8 ; ret
0x0000000000409aec : sub rsp, 8 ; add rsp, 8 ; ret
0x000000000040c861 : test al, -1 ; jmp qword ptr [rdx]
0x0000000000409aba : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret
0x000000000040253d : test byte ptr [rsi], cl ; add byte ptr [rax], al ; add dh, dh ; add al, 0x25 ; ret
0x000000000040225a : test dword ptr [rsi], ecx ; add byte ptr [rax], al ; add dh, dh ; add al, 0x25 ; ret
0x000000000040c461 : test edi, edi ; call rdi
0x000000000040c481 : xchg bh, bh ; call rsp
0x0000000000405046 : xchg eax, esp ; ret 0x8445
0x0000000000407652 : xchg eax, esp ; ret 0xd284
0x0000000000403fab : xchg eax, esp ; shl byte ptr [rcx + rax], 0xf ; mov dh, -0x40 ; pop rbp ; ret
0x000000000040c4c1 : xchg edi, edi ; call rax
0x000000000040c280 : xor byte ptr [rcx - 1], dh ; call qword ptr [rax]
0x000000000040937e : xor byte ptr [rcx], al ; add byte ptr [rax], al ; pop rbp ; ret
0x0000000000405a26 : xor edi, esi ; mov dword ptr [rax], edi ; mov eax, dword ptr [rbp - 0x28] ; pop rbp ; ret
